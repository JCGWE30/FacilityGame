//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""OnFoot"",
            ""id"": ""75de06a4-270f-4d65-ba3a-396d7e90a1af"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9fc95d53-07f6-4ad1-a899-b1abdcedf8ae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""ac7517d9-6a28-4840-83dd-da9a0cb12ffd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""c939fe99-4ff2-40e8-b7e0-975442e89ad7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""00d9517e-cbff-497b-a97c-f1274c4b5721"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Command"",
                    ""type"": ""Button"",
                    ""id"": ""b482136f-6c5f-4a5e-b599-c4500996771c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AltHeld"",
                    ""type"": ""Value"",
                    ""id"": ""e69b367a-bb04-4bea-8828-6aa6780ede99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slot 1"",
                    ""type"": ""Button"",
                    ""id"": ""7607687a-5004-4b31-bf30-7eed2c438d47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot 2"",
                    ""type"": ""Button"",
                    ""id"": ""6fd75389-0137-42f9-b91d-5f3b3542796a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot 3"",
                    ""type"": ""Button"",
                    ""id"": ""26b424dd-56dd-4101-98f9-618ce9f08519"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot 4"",
                    ""type"": ""Button"",
                    ""id"": ""9faeb6f4-db75-46f5-97a4-46db392ae398"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot 5"",
                    ""type"": ""Button"",
                    ""id"": ""3ac84293-cb27-404e-9f65-6ccd2a64e2ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""47fc8d74-08e7-4242-af5c-643838a36cff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8902ec2d-a19c-4d9a-a3fd-35bb424fca8b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8abd7a9c-8fdf-45e4-bf14-18332c5a6ed5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""14529d50-d5e8-4411-ada7-f8d03c7cb6a0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2cefedf-fb54-4296-bc43-086260814888"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47bfeeb7-493b-41d7-ade8-21a7145efbd1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0254d874-01dd-4b86-9650-7b877477c227"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00a22f9-363d-44f1-9811-28057b2deabb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7abe8b60-ad8c-4ce8-8400-0bb84438efe5"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5f71ad1-fedb-47ad-8ef0-7eaa7fc12189"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltHeld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05a6dbb6-43fe-4778-bcea-cc35d79e1172"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slot 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9beec66-ffc3-47f1-89f1-f0c8b7c5d2d1"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slot 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fed2193-524c-45b2-b48c-c0bbbdecdadc"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slot 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be5f47db-d4a0-4038-96a5-dc3da60d116d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slot 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5daecb90-6602-4c4b-8f70-781284869c96"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slot 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""df500ad6-2680-4b6e-8cda-2df47bdcb880"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""1dab1a06-57c1-4f9e-88ce-2b646c6fc1dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""afcac640-7983-4aff-8b1d-3acb1dce3d81"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""09869ce0-a587-4e7b-8912-c99834b038db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Value"",
                    ""id"": ""133f41c0-1a9c-4ef9-b5be-c95d39eaee54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8340ae3-0596-4f78-b019-d38cb9d6d9ac"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7760eda9-b55f-41b7-bc4e-4eb941c3c480"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76a61f2d-b4ff-4e77-a998-022d58299127"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e117168f-1b40-447e-83e2-cfa43079ffb9"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CommandBox"",
            ""id"": ""5f8192c1-10b7-4e68-9f16-634279f8c204"",
            ""actions"": [
                {
                    ""name"": ""SendCommand"",
                    ""type"": ""Button"",
                    ""id"": ""1d621544-0161-447c-b7dd-0069772637b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""40a65486-d9fb-4b77-aaa8-b96803c60abc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6c12412-c7e5-4386-a330-042db03de8ca"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52a4f9e5-e6a7-479a-84c0-0851f2f80d4b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LatheMenu"",
            ""id"": ""7bb6ff95-ff40-49b9-920f-0778d3f00b43"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""2b7e2e6c-1b29-4acf-b6c5-adcddc7344d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""afea916f-262a-482c-8904-81121a4a33f5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ResearchTable"",
            ""id"": ""804bcdf3-1183-4122-833e-ea5dbb429be5"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""0e1974d0-bcfe-4f19-92d0-b19633c0ef9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b8fdfac-ae37-43cb-b90f-dae2fe166aa9"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DailyLog"",
            ""id"": ""a32ae72e-a46d-4829-b84a-d15a50c83700"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""6cc8a0db-9c25-43d6-9e46-8ccea1d81ffc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89919230-52c8-4494-9f65-7288475d144b"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TechComputer"",
            ""id"": ""e73c70d6-90a9-420c-a40e-da6f4e241655"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""04facd3e-b6a3-4937-9a6a-1551988f8668"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79774a30-c76f-494b-bc20-733fbce53a5c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OnFoot
        m_OnFoot = asset.FindActionMap("OnFoot", throwIfNotFound: true);
        m_OnFoot_Movement = m_OnFoot.FindAction("Movement", throwIfNotFound: true);
        m_OnFoot_Look = m_OnFoot.FindAction("Look", throwIfNotFound: true);
        m_OnFoot_Inventory = m_OnFoot.FindAction("Inventory", throwIfNotFound: true);
        m_OnFoot_Interact = m_OnFoot.FindAction("Interact", throwIfNotFound: true);
        m_OnFoot_Command = m_OnFoot.FindAction("Command", throwIfNotFound: true);
        m_OnFoot_AltHeld = m_OnFoot.FindAction("AltHeld", throwIfNotFound: true);
        m_OnFoot_Slot1 = m_OnFoot.FindAction("Slot 1", throwIfNotFound: true);
        m_OnFoot_Slot2 = m_OnFoot.FindAction("Slot 2", throwIfNotFound: true);
        m_OnFoot_Slot3 = m_OnFoot.FindAction("Slot 3", throwIfNotFound: true);
        m_OnFoot_Slot4 = m_OnFoot.FindAction("Slot 4", throwIfNotFound: true);
        m_OnFoot_Slot5 = m_OnFoot.FindAction("Slot 5", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_Close = m_Inventory.FindAction("Close", throwIfNotFound: true);
        m_Inventory_MousePosition = m_Inventory.FindAction("MousePosition", throwIfNotFound: true);
        m_Inventory_MouseClick = m_Inventory.FindAction("MouseClick", throwIfNotFound: true);
        m_Inventory_Shift = m_Inventory.FindAction("Shift", throwIfNotFound: true);
        // CommandBox
        m_CommandBox = asset.FindActionMap("CommandBox", throwIfNotFound: true);
        m_CommandBox_SendCommand = m_CommandBox.FindAction("SendCommand", throwIfNotFound: true);
        m_CommandBox_Exit = m_CommandBox.FindAction("Exit", throwIfNotFound: true);
        // LatheMenu
        m_LatheMenu = asset.FindActionMap("LatheMenu", throwIfNotFound: true);
        m_LatheMenu_Close = m_LatheMenu.FindAction("Close", throwIfNotFound: true);
        // ResearchTable
        m_ResearchTable = asset.FindActionMap("ResearchTable", throwIfNotFound: true);
        m_ResearchTable_Close = m_ResearchTable.FindAction("Close", throwIfNotFound: true);
        // DailyLog
        m_DailyLog = asset.FindActionMap("DailyLog", throwIfNotFound: true);
        m_DailyLog_Close = m_DailyLog.FindAction("Close", throwIfNotFound: true);
        // TechComputer
        m_TechComputer = asset.FindActionMap("TechComputer", throwIfNotFound: true);
        m_TechComputer_Close = m_TechComputer.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnFoot
    private readonly InputActionMap m_OnFoot;
    private List<IOnFootActions> m_OnFootActionsCallbackInterfaces = new List<IOnFootActions>();
    private readonly InputAction m_OnFoot_Movement;
    private readonly InputAction m_OnFoot_Look;
    private readonly InputAction m_OnFoot_Inventory;
    private readonly InputAction m_OnFoot_Interact;
    private readonly InputAction m_OnFoot_Command;
    private readonly InputAction m_OnFoot_AltHeld;
    private readonly InputAction m_OnFoot_Slot1;
    private readonly InputAction m_OnFoot_Slot2;
    private readonly InputAction m_OnFoot_Slot3;
    private readonly InputAction m_OnFoot_Slot4;
    private readonly InputAction m_OnFoot_Slot5;
    public struct OnFootActions
    {
        private @PlayerInput m_Wrapper;
        public OnFootActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OnFoot_Movement;
        public InputAction @Look => m_Wrapper.m_OnFoot_Look;
        public InputAction @Inventory => m_Wrapper.m_OnFoot_Inventory;
        public InputAction @Interact => m_Wrapper.m_OnFoot_Interact;
        public InputAction @Command => m_Wrapper.m_OnFoot_Command;
        public InputAction @AltHeld => m_Wrapper.m_OnFoot_AltHeld;
        public InputAction @Slot1 => m_Wrapper.m_OnFoot_Slot1;
        public InputAction @Slot2 => m_Wrapper.m_OnFoot_Slot2;
        public InputAction @Slot3 => m_Wrapper.m_OnFoot_Slot3;
        public InputAction @Slot4 => m_Wrapper.m_OnFoot_Slot4;
        public InputAction @Slot5 => m_Wrapper.m_OnFoot_Slot5;
        public InputActionMap Get() { return m_Wrapper.m_OnFoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnFootActions set) { return set.Get(); }
        public void AddCallbacks(IOnFootActions instance)
        {
            if (instance == null || m_Wrapper.m_OnFootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnFootActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Command.started += instance.OnCommand;
            @Command.performed += instance.OnCommand;
            @Command.canceled += instance.OnCommand;
            @AltHeld.started += instance.OnAltHeld;
            @AltHeld.performed += instance.OnAltHeld;
            @AltHeld.canceled += instance.OnAltHeld;
            @Slot1.started += instance.OnSlot1;
            @Slot1.performed += instance.OnSlot1;
            @Slot1.canceled += instance.OnSlot1;
            @Slot2.started += instance.OnSlot2;
            @Slot2.performed += instance.OnSlot2;
            @Slot2.canceled += instance.OnSlot2;
            @Slot3.started += instance.OnSlot3;
            @Slot3.performed += instance.OnSlot3;
            @Slot3.canceled += instance.OnSlot3;
            @Slot4.started += instance.OnSlot4;
            @Slot4.performed += instance.OnSlot4;
            @Slot4.canceled += instance.OnSlot4;
            @Slot5.started += instance.OnSlot5;
            @Slot5.performed += instance.OnSlot5;
            @Slot5.canceled += instance.OnSlot5;
        }

        private void UnregisterCallbacks(IOnFootActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Command.started -= instance.OnCommand;
            @Command.performed -= instance.OnCommand;
            @Command.canceled -= instance.OnCommand;
            @AltHeld.started -= instance.OnAltHeld;
            @AltHeld.performed -= instance.OnAltHeld;
            @AltHeld.canceled -= instance.OnAltHeld;
            @Slot1.started -= instance.OnSlot1;
            @Slot1.performed -= instance.OnSlot1;
            @Slot1.canceled -= instance.OnSlot1;
            @Slot2.started -= instance.OnSlot2;
            @Slot2.performed -= instance.OnSlot2;
            @Slot2.canceled -= instance.OnSlot2;
            @Slot3.started -= instance.OnSlot3;
            @Slot3.performed -= instance.OnSlot3;
            @Slot3.canceled -= instance.OnSlot3;
            @Slot4.started -= instance.OnSlot4;
            @Slot4.performed -= instance.OnSlot4;
            @Slot4.canceled -= instance.OnSlot4;
            @Slot5.started -= instance.OnSlot5;
            @Slot5.performed -= instance.OnSlot5;
            @Slot5.canceled -= instance.OnSlot5;
        }

        public void RemoveCallbacks(IOnFootActions instance)
        {
            if (m_Wrapper.m_OnFootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnFootActions instance)
        {
            foreach (var item in m_Wrapper.m_OnFootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnFootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnFootActions @OnFoot => new OnFootActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_Close;
    private readonly InputAction m_Inventory_MousePosition;
    private readonly InputAction m_Inventory_MouseClick;
    private readonly InputAction m_Inventory_Shift;
    public struct InventoryActions
    {
        private @PlayerInput m_Wrapper;
        public InventoryActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Inventory_Close;
        public InputAction @MousePosition => m_Wrapper.m_Inventory_MousePosition;
        public InputAction @MouseClick => m_Wrapper.m_Inventory_MouseClick;
        public InputAction @Shift => m_Wrapper.m_Inventory_Shift;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // CommandBox
    private readonly InputActionMap m_CommandBox;
    private List<ICommandBoxActions> m_CommandBoxActionsCallbackInterfaces = new List<ICommandBoxActions>();
    private readonly InputAction m_CommandBox_SendCommand;
    private readonly InputAction m_CommandBox_Exit;
    public struct CommandBoxActions
    {
        private @PlayerInput m_Wrapper;
        public CommandBoxActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SendCommand => m_Wrapper.m_CommandBox_SendCommand;
        public InputAction @Exit => m_Wrapper.m_CommandBox_Exit;
        public InputActionMap Get() { return m_Wrapper.m_CommandBox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommandBoxActions set) { return set.Get(); }
        public void AddCallbacks(ICommandBoxActions instance)
        {
            if (instance == null || m_Wrapper.m_CommandBoxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommandBoxActionsCallbackInterfaces.Add(instance);
            @SendCommand.started += instance.OnSendCommand;
            @SendCommand.performed += instance.OnSendCommand;
            @SendCommand.canceled += instance.OnSendCommand;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ICommandBoxActions instance)
        {
            @SendCommand.started -= instance.OnSendCommand;
            @SendCommand.performed -= instance.OnSendCommand;
            @SendCommand.canceled -= instance.OnSendCommand;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ICommandBoxActions instance)
        {
            if (m_Wrapper.m_CommandBoxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommandBoxActions instance)
        {
            foreach (var item in m_Wrapper.m_CommandBoxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommandBoxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommandBoxActions @CommandBox => new CommandBoxActions(this);

    // LatheMenu
    private readonly InputActionMap m_LatheMenu;
    private List<ILatheMenuActions> m_LatheMenuActionsCallbackInterfaces = new List<ILatheMenuActions>();
    private readonly InputAction m_LatheMenu_Close;
    public struct LatheMenuActions
    {
        private @PlayerInput m_Wrapper;
        public LatheMenuActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_LatheMenu_Close;
        public InputActionMap Get() { return m_Wrapper.m_LatheMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LatheMenuActions set) { return set.Get(); }
        public void AddCallbacks(ILatheMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_LatheMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LatheMenuActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(ILatheMenuActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(ILatheMenuActions instance)
        {
            if (m_Wrapper.m_LatheMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILatheMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_LatheMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LatheMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LatheMenuActions @LatheMenu => new LatheMenuActions(this);

    // ResearchTable
    private readonly InputActionMap m_ResearchTable;
    private List<IResearchTableActions> m_ResearchTableActionsCallbackInterfaces = new List<IResearchTableActions>();
    private readonly InputAction m_ResearchTable_Close;
    public struct ResearchTableActions
    {
        private @PlayerInput m_Wrapper;
        public ResearchTableActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_ResearchTable_Close;
        public InputActionMap Get() { return m_Wrapper.m_ResearchTable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ResearchTableActions set) { return set.Get(); }
        public void AddCallbacks(IResearchTableActions instance)
        {
            if (instance == null || m_Wrapper.m_ResearchTableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ResearchTableActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IResearchTableActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IResearchTableActions instance)
        {
            if (m_Wrapper.m_ResearchTableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IResearchTableActions instance)
        {
            foreach (var item in m_Wrapper.m_ResearchTableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ResearchTableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ResearchTableActions @ResearchTable => new ResearchTableActions(this);

    // DailyLog
    private readonly InputActionMap m_DailyLog;
    private List<IDailyLogActions> m_DailyLogActionsCallbackInterfaces = new List<IDailyLogActions>();
    private readonly InputAction m_DailyLog_Close;
    public struct DailyLogActions
    {
        private @PlayerInput m_Wrapper;
        public DailyLogActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_DailyLog_Close;
        public InputActionMap Get() { return m_Wrapper.m_DailyLog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DailyLogActions set) { return set.Get(); }
        public void AddCallbacks(IDailyLogActions instance)
        {
            if (instance == null || m_Wrapper.m_DailyLogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DailyLogActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IDailyLogActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IDailyLogActions instance)
        {
            if (m_Wrapper.m_DailyLogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDailyLogActions instance)
        {
            foreach (var item in m_Wrapper.m_DailyLogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DailyLogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DailyLogActions @DailyLog => new DailyLogActions(this);

    // TechComputer
    private readonly InputActionMap m_TechComputer;
    private List<ITechComputerActions> m_TechComputerActionsCallbackInterfaces = new List<ITechComputerActions>();
    private readonly InputAction m_TechComputer_Close;
    public struct TechComputerActions
    {
        private @PlayerInput m_Wrapper;
        public TechComputerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_TechComputer_Close;
        public InputActionMap Get() { return m_Wrapper.m_TechComputer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TechComputerActions set) { return set.Get(); }
        public void AddCallbacks(ITechComputerActions instance)
        {
            if (instance == null || m_Wrapper.m_TechComputerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TechComputerActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(ITechComputerActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(ITechComputerActions instance)
        {
            if (m_Wrapper.m_TechComputerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITechComputerActions instance)
        {
            foreach (var item in m_Wrapper.m_TechComputerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TechComputerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TechComputerActions @TechComputer => new TechComputerActions(this);
    public interface IOnFootActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCommand(InputAction.CallbackContext context);
        void OnAltHeld(InputAction.CallbackContext context);
        void OnSlot1(InputAction.CallbackContext context);
        void OnSlot2(InputAction.CallbackContext context);
        void OnSlot3(InputAction.CallbackContext context);
        void OnSlot4(InputAction.CallbackContext context);
        void OnSlot5(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnClose(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
    }
    public interface ICommandBoxActions
    {
        void OnSendCommand(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
    public interface ILatheMenuActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
    public interface IResearchTableActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
    public interface IDailyLogActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
    public interface ITechComputerActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
